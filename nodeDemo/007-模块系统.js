// Node.js模块系统
// 为了让Node.js的文件可以相互调用，Node.js提供了一个简单的模块系统。
// 模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的


// 1. 创建模块
// 一个模块就是一个js文件
// Node提供了exports 和 require 两个对象， exports是模块公开的接口，require是从外部获取一个模块的接口， 也就是获取exports导出的对象


// 有时候我们只是想把一个对象封装到模块中，格式如下：
// main.js
// module.exports = function () {
  
// }


// 比如在另一个文件我想引入这个文件 ,  而且他们是同级目录
// js 文件可以省略后缀
// require('./main.js')
// require('./main')




// 服务端的模块在哪里？

// 像我们使用的  http  fs 等一些模块  他是node.js自带的模块

// node 中 require方法中查找的文件策略如下：
// 由于 Node.js 中存在 4 类模块（原生模块和3种文件模块），尽管 require 方法极其简单，但是内部的加载却是十分复杂的，其加载优先级也各自不同


require ->  先去缓存区找 -> export返回对象
        ->  未找到   -> 判断是否为原生模块   ->  是   ->   判断是否在原生区缓存  ->   是  返回export
                                                                             ->   不是  加载原生  -> 缓存文件  ->   返回export 
                                           ->  不是 ->   查找文件模块  ->  根据扩展名导入模块  -> 缓存文件模块   ->   返回export


